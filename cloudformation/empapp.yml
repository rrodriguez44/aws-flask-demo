Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  #our EC2 security group
  EC2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EC2SecurityGroup.GroupId
      FromPort: 443
      IpProtocol: tcp
      ToPort: 443
      SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId
      
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and access to mysql db
      SecurityGroupIngress:
      - CidrIp: 172.31.0.0/16
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      - CidrIp: 24.26.206.65/16
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 24.26.206.65/16
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 24.26.206.65/16
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EmpAppInstanceProfile
      Roles:
        - DemoRoleForEC2

  EmpAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: arn:aws:iam::793465516547:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::793465516547:role/ecsTaskRole
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: empAppTask
          Image: 793465516547.dkr.ecr.us-east-2.amazonaws.com/awsflaskdemo
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EmpAppLogGroup
              awslogs-region: "us-east-2"
              awslogs-stream-prefix: "ecs"

  EmpAppLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 3

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: EmpAppFargateCluster

  EmpAppFargateAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: EmpAppFargateAlb
      Subnets:
        - subnet-098188ccbe49d334b
        - subnet-0d2b9e63cd65bc742
        - subnet-074c5aa7a556836e7
      Type: application
      SecurityGroups:
      - !GetAtt "EC2SecurityGroup.GroupId"

  EmpAppFargateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: EmpAppFargateTargetGroup
      VpcId: vpc-0cbd436826c483d39
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /health/
      TargetType: ip

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref EmpAppFargateTargetGroup
          Type: forward
      LoadBalancerArn: !Ref EmpAppFargateAlb
      Port: 80
      Protocol: HTTP

  Alb2FargateContainers:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for traffic between ALB and containers
      GroupName: Alb2FargateContainers
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId
          Description: 'Inbound rule for all traffic'

  MyECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      LaunchType: FARGATE
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "EmpAppTaskDefinition"
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt Alb2FargateContainers.GroupId
          Subnets: ['subnet-098188ccbe49d334b','subnet-0d2b9e63cd65bc742','subnet-074c5aa7a556836e7']
      LoadBalancers:
        - TargetGroupArn:
            Ref: EmpAppFargateTargetGroup
          ContainerPort: 80
          ContainerName: empAppTask

  EmpAppRDS:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    DependsOn: RDSSetupFunction
    Properties:
      AvailabilityZone: us-east-2b
      DBName: employee
      VPCSecurityGroups: 
        - !GetAtt EC2SecurityGroup.GroupId
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      EngineVersion: '8.0.17'
      MasterUsername: admin
      MasterUserPassword: '{{resolve:secretsmanager:RDSPass:SecretString}}'
      StorageEncrypted: true
  
  RDSEndpointSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSEndpoint
      Description: This holds the rds enpoint to be used by the app after deployment
      SecretString: !GetAtt EmpAppRDS.Endpoint.Address

  RDSPassSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSPass
      Description: This holds the rds password to be used by cf and the app after deployment
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        PasswordLength: 24

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: pcty-employee
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
          
  RDSSetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: empAppRdsSetup.handler
      Role: arn:aws:iam::793465516547:role/EmpAppRdsSetupLambdaRole
      Code:
        S3Bucket: pcty-lambda-bucket
        S3Key: empAppRdsSetup.zip
      Runtime: python3.9
      Timeout: 900
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId
        SubnetIds:
          - subnet-098188ccbe49d334b
          - subnet-0d2b9e63cd65bc742
          - subnet-074c5aa7a556836e7

  LambdaSecretsManagerVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcId: vpc-0cbd436826c483d39
      SubnetIds: 
        - subnet-098188ccbe49d334b
        - subnet-0d2b9e63cd65bc742
        - subnet-074c5aa7a556836e7
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      PrivateDnsEnabled: true

  EventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "detect-ec2-instance-start"
      Description: "A CloudWatch Event Rule that detects start to EC2 Instances and publishes change events to an SNS topic for notification."
      State: "ENABLED"
      Targets:
        - Arn:
            !GetAtt RDSSetupFunction.Arn
          Id: "target-id1"
      EventPattern:
        source: 
        - "aws.ec2"
        detail-type:
        - "EC2 Instance State-change Notification"
        detail:
          state:
          - "pending"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        !Ref RDSSetupFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        !GetAtt EventRule.Arn